// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/idTableStaking/create_node.cdc (1.521kB)
// ../../../transactions/idTableStaking/create_stake.cdc (0)
// ../../../transactions/idTableStaking/get_current_table.cdc (190B)
// ../../../transactions/idTableStaking/get_node_committedTokens.cdc (221B)
// ../../../transactions/idTableStaking/get_node_initial_weight.cdc (312B)
// ../../../transactions/idTableStaking/get_node_networking_addr.cdc (319B)
// ../../../transactions/idTableStaking/get_node_networking_key.cdc (311B)
// ../../../transactions/idTableStaking/get_node_role.cdc (291B)
// ../../../transactions/idTableStaking/get_node_stakedTokens.cdc (218B)
// ../../../transactions/idTableStaking/get_node_staking_key.cdc (305B)
// ../../../transactions/idTableStaking/get_node_unlockedTokens.cdc (222B)
// ../../../transactions/idTableStaking/get_node_unstakedTokens.cdc (222B)
// ../../../transactions/idTableStaking/remove_node.cdc (576B)
// ../../../transactions/idTableStaking/stake_new_tokens.cdc (840B)
// ../../../transactions/idTableStaking/stake_unlocked_tokens.cdc (0)
// ../../../transactions/idTableStaking/transfer_minter_deploy.cdc (694B)
// ../../../transactions/idTableStaking/unstake_tokens.cdc (0)
// ../../../transactions/idTableStaking/withdraw_tokens.cdc (0)
// ../../../transactions/inspect_field.cdc (122B)
// ../../../transactions/qc/create_qc_object.cdc (624B)
// ../../../transactions/qc/get_all_votes.cdc (126B)
// ../../../transactions/qc/get_clusters.cdc (133B)
// ../../../transactions/qc/get_votes_in_cluster.cdc (163B)
// ../../../transactions/qc/reset_qc_voting.cdc (500B)
// ../../../transactions/qc/set_collector_clusters.cdc (548B)
// ../../../transactions/qc/submit_qc_vote.cdc (518B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TransactionsIdtablestakingCreate_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4f\x6b\xdb\x4e\x10\xbd\xeb\x53\x0c\x39\xfc\xb0\x21\x91\x7e\x87\x10\x8a\x70\x1b\xd4\xd8\x01\x91\x90\x40\xac\x36\xf4\xb8\xd9\x1d\xd9\xdb\x48\x3b\x62\x35\x8a\x12\x4a\xbe\x7b\xd9\x55\x54\x4b\xfe\x03\x6e\xf7\x60\x7b\x77\xde\x0c\x6f\xde\xcc\xb3\x2e\x2b\xb2\x0c\xd7\x05\xb5\xe9\x3c\x13\x4f\x05\x2e\x59\x3c\x6b\xb3\x82\xdc\x52\x09\xff\xbf\xa6\xf3\xc5\x5d\x96\x66\x3f\xb2\xe4\xeb\xed\x22\x99\xcf\x1f\x16\xcb\x65\x30\xc8\xca\xe8\x19\x4d\x0f\xbe\xbe\xbd\x7f\xcc\xee\x6f\x16\x77\x3d\x30\x88\x22\xc8\xd6\xba\x06\xb6\xc2\xd4\x42\xb2\x26\x03\xd2\xa2\x60\xac\x41\x80\xc1\x16\x0c\x29\x84\x9a\x6d\x23\x19\xe8\xe9\x27\x4a\x76\x49\xc2\x28\x68\x2a\xe5\x71\xbc\x46\xa8\x2c\x55\x54\xa3\x82\x54\xa1\x61\xcd\x6f\xe0\xc9\x06\xc1\xa0\xf0\x44\xab\x18\x96\x6c\xb5\x59\x9d\x42\x00\x83\x63\xa9\xc0\x18\xbe\xa5\x86\x3f\x6d\x45\x0c\x72\x4b\xd6\x35\x9c\x28\x65\xb1\xae\x0f\x54\xd8\xe0\x6e\xf0\xed\x00\xa6\xee\x94\x3b\x0c\xd0\x46\xb3\x16\xc5\x23\xea\xd5\x9a\x3b\x3e\x17\xe7\x5b\x18\x51\x52\x63\x5c\xf0\x5a\xbf\x5e\x9c\x4f\xe1\x57\xe0\xc3\x51\x04\xb7\x24\x45\x01\x2f\xc2\x6a\xd7\x39\xe4\x64\x41\x80\xc5\x1c\x2d\x1a\x89\xc0\xe4\x85\x4a\xe7\x9d\x32\x90\xa8\x52\x9b\x5e\x51\x57\xa2\x40\x06\xe1\x1e\x1f\x30\x8f\xe1\xbf\xdd\x91\x87\x3e\x25\xf8\x03\xce\xfb\xf1\x6e\x12\xfc\x35\xfc\x2e\x9a\x82\x3b\x5c\x65\xb1\x12\x16\x27\x42\x4a\x8e\x21\x69\x78\x9d\x48\xe9\x3a\x70\xcc\xfb\x9e\xa2\x08\x9e\xc8\x5a\x6a\xf7\x11\x16\xdb\x3c\xbd\x94\x58\xe4\x61\x4f\x16\x3e\x83\x2b\x1f\x76\x35\x66\x07\x99\x7f\x99\xb8\x35\x8c\x21\xaa\x99\xac\x58\x61\xe4\x1a\xf8\x40\x78\xc0\x74\xa4\xf4\xe5\x25\x54\xc2\x68\x39\x39\xb9\xa2\xa6\x50\x60\x88\x7b\x9a\x23\x92\x1f\x63\xed\x88\x9e\x4c\x83\x31\xc9\xa1\x48\xfb\x88\x0e\x14\xdb\xcb\xcf\xc7\x7d\xf8\xdf\xd8\x39\xcb\x81\xcf\x1f\x52\x73\xe3\x73\xc6\x72\xdd\xa3\x85\xd9\xd9\x58\xd1\x50\x28\x75\x47\x0a\x1f\x50\x92\x55\xde\x37\x5a\x6d\x2d\xe2\xa1\xd3\x79\xc9\x7d\x1e\x99\xb0\xc7\x62\x3b\x4f\x7f\x5d\xca\x9b\x6c\x74\x3d\xb2\xc4\xd0\xa4\x9b\xdf\x47\x26\x6f\x19\x78\x74\x3d\x3d\xaa\x02\xbb\x71\xd7\x57\x54\x96\x9a\x19\x55\x0c\xb3\xb3\x9d\x35\x0a\x5b\xcd\x6b\x65\x45\x3b\xe9\xff\x0c\xba\xef\xe9\x60\xc0\x7e\xcf\x6a\xf1\x82\x93\xd9\xd9\x66\xd0\xa7\xc0\xb4\x67\xff\xd1\x7e\x64\xbe\x07\xef\xbf\x03\x00\x00\xff\xff\x70\xcf\xe7\xdb\xf1\x05\x00\x00"

func TransactionsIdtablestakingCreate_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingCreate_nodeCdc,
		"../../../transactions/idTableStaking/create_node.cdc",
	)
}

func TransactionsIdtablestakingCreate_nodeCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingCreate_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/create_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x68, 0xe8, 0x3, 0xa, 0x9e, 0xff, 0x77, 0x4b, 0xeb, 0x3f, 0x9b, 0x93, 0x9d, 0xa5, 0xb4, 0x56, 0x33, 0xf6, 0x75, 0x42, 0xf0, 0x7, 0x5e, 0xe6, 0xc4, 0xa4, 0x38, 0xf3, 0x82, 0x47, 0xf}}
	return a, nil
}

var _TransactionsIdtablestakingCreate_stakeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func TransactionsIdtablestakingCreate_stakeCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingCreate_stakeCdc,
		"../../../transactions/idTableStaking/create_stake.cdc",
	)
}

func TransactionsIdtablestakingCreate_stakeCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingCreate_stakeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/create_stake.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _TransactionsIdtablestakingGet_current_tableCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xbd\x6a\xc3\x30\x14\x47\xf1\x5d\x4f\xf1\x1f\xed\xa5\xee\x50\x3a\x74\x73\x91\x0b\x82\xe2\xa1\x56\x87\x52\x32\xf8\xe3\xda\x16\xb1\xaf\x8c\x74\x45\x12\x42\xde\x3d\x18\x32\x66\x3b\xd3\x8f\xe3\xd6\xcd\x07\xc1\xd7\xe2\x4f\x46\xdb\xb6\x5b\xa8\x91\xf6\xe8\x78\xc2\x18\xfc\x8a\xd7\xb3\xd1\x55\x6d\x8d\xfd\xb3\xe5\xe7\x77\x55\x6a\xfd\x53\x35\x8d\x52\x45\x01\x3b\xbb\x88\xd8\x07\xb7\x09\x02\x49\x0a\x1c\x21\x33\xa1\x4f\x21\x10\x0b\xdc\x40\x2c\x4e\x2e\x90\x5d\xc5\x42\x3c\xc9\xac\xd4\x96\x3a\x8c\x89\xb1\xb6\x8e\xb3\xfc\x03\xff\xbf\x86\xe5\xfd\xed\x80\xab\x02\xf0\x90\x9e\xfc\xbc\x4c\x24\x7b\xd2\x50\xfb\x81\x8c\x8e\x59\xae\x6e\xf7\x00\x00\x00\xff\xff\xec\xea\xfa\x85\xbe\x00\x00\x00"

func TransactionsIdtablestakingGet_current_tableCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingGet_current_tableCdc,
		"../../../transactions/idTableStaking/get_current_table.cdc",
	)
}

func TransactionsIdtablestakingGet_current_tableCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingGet_current_tableCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/get_current_table.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0x91, 0x90, 0xa, 0x66, 0x33, 0xba, 0xad, 0xfd, 0x35, 0xaa, 0x7e, 0x8d, 0xd4, 0x63, 0xe, 0xf4, 0x43, 0xf8, 0xa6, 0x24, 0xd7, 0x26, 0xbc, 0x76, 0xe3, 0x4f, 0x83, 0xcc, 0x70, 0x50, 0xe0}}
	return a, nil
}

var _TransactionsIdtablestakingGet_node_committedtokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x4f\xc3\x30\x10\xc5\xf1\xdd\x9f\xe2\xb1\xd1\x85\x32\x20\x86\x6e\x2d\x0e\x92\x25\xd4\x01\x9b\x81\xd1\xa9\x2f\xa9\x95\xf8\x2e\xb2\x2f\x02\x09\xf1\xdd\x51\x45\xc7\xae\xff\xe1\xf7\x5e\x2e\x8b\x54\xc5\xeb\x2c\x5f\xce\x86\xd8\xcf\xe4\x35\x4e\x99\x47\x0c\x55\x0a\x1e\xbf\x9d\xed\x8e\xc1\x85\xcf\xb0\x3f\xbc\x75\x7b\x6b\xdf\x3b\xef\x8d\xd9\x6e\x11\xce\xb9\xa1\x9d\x6a\x5e\x14\x95\x74\xad\xdc\xa0\x67\x42\x1f\xe7\xc8\x27\x82\x0c\x68\x1a\x27\x4a\x50\x99\x88\xdb\x25\x44\xb0\x24\x32\x66\x59\x7b\x0c\x2b\xa3\xc4\xcc\xf7\x97\xe4\xec\x0e\x5e\x6b\xe6\x71\xb3\xc3\x87\x63\x7d\x7e\xc2\x8f\x01\x70\xa5\x6f\x1c\x7c\x18\x49\x8f\x92\xe8\x45\x4a\xc9\xaa\x94\x0e\xff\xc3\x57\x6f\x73\x67\x7e\xff\x02\x00\x00\xff\xff\x96\xbf\xd9\x29\xdd\x00\x00\x00"

func TransactionsIdtablestakingGet_node_committedtokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingGet_node_committedtokensCdc,
		"../../../transactions/idTableStaking/get_node_committedTokens.cdc",
	)
}

func TransactionsIdtablestakingGet_node_committedtokensCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingGet_node_committedtokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/get_node_committedTokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xd0, 0x69, 0x97, 0x97, 0x4b, 0xec, 0x8a, 0xdb, 0x16, 0x26, 0xae, 0x87, 0xda, 0x5, 0x1, 0x32, 0x2, 0x6d, 0x32, 0xb2, 0xf5, 0x85, 0x12, 0xd6, 0x18, 0xa4, 0xdd, 0x83, 0x5b, 0xe8, 0xdb}}
	return a, nil
}

var _TransactionsIdtablestakingGet_node_initial_weightCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4b\xc3\x40\x10\x85\xef\xfb\x2b\x9e\x37\x0b\xc5\x7a\x10\x0f\xbd\xd5\x26\xd2\x80\xd4\x62\x22\xd2\xdb\x6e\xd3\x4d\x32\x98\xec\x86\xd9\x59\x23\x94\xfe\x77\x59\xcd\xd1\xe3\xc0\x7b\xf3\xbd\x8f\x86\xd1\xb3\xe0\xb9\xf7\x53\x91\x55\xe6\xd4\xdb\x52\xcc\x27\xb9\x16\x0d\xfb\x01\xf7\xdf\x45\x96\xef\xab\xa2\x3a\x56\x9b\xa7\x97\x7c\x93\x65\x6f\x79\x59\x2a\xb5\x5a\xa1\xea\x28\x20\xd4\x4c\xa3\x80\xad\x44\x76\x01\xd2\x59\x90\x23\x21\xd3\x63\xb2\xd4\x76\x02\xdf\xc0\xc0\xf9\xb3\x4d\x9d\xa3\x8f\x18\x62\x10\x34\xd4\xf7\x20\x07\x7d\xc9\x0f\xaf\xdb\xdd\x61\xb7\x29\xf3\xab\xc6\x44\xd2\x21\x05\xf5\x36\x32\x5b\x27\x7a\x09\x7d\x60\xfb\x45\x3e\x06\xbd\x84\xe7\x74\xfa\xd1\x07\x7b\x9e\xd3\x09\x59\x7b\x66\x5b\x0b\xc6\xce\x04\xab\xd4\x18\x4f\x68\xa2\xc3\x60\xc8\xdd\x26\x74\x91\xad\x51\x0a\x93\x6b\x17\x6b\xbc\x17\x4e\x1e\x1f\x70\x51\x00\xe6\xe1\xff\xe8\xdf\xb5\x56\xf6\xa9\xfa\x67\xf3\xf1\x2b\x33\x3f\x5b\xdc\xa8\xeb\x4f\x00\x00\x00\xff\xff\x82\xf4\xd6\x5d\x38\x01\x00\x00"

func TransactionsIdtablestakingGet_node_initial_weightCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingGet_node_initial_weightCdc,
		"../../../transactions/idTableStaking/get_node_initial_weight.cdc",
	)
}

func TransactionsIdtablestakingGet_node_initial_weightCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingGet_node_initial_weightCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/get_node_initial_weight.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0x67, 0x8b, 0xc1, 0xc, 0x73, 0x6e, 0x42, 0x81, 0x14, 0x4, 0x27, 0xf6, 0x80, 0x1f, 0x1f, 0x88, 0x4c, 0xf9, 0xa4, 0x97, 0x61, 0xd6, 0xdf, 0xe4, 0x98, 0x2, 0xa3, 0x22, 0xb2, 0x11, 0x12}}
	return a, nil
}

var _TransactionsIdtablestakingGet_node_networking_addrCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x6e\xb3\x40\x10\x84\xfb\x7b\x8a\x29\x7f\x4b\xd6\xef\xd4\xe9\x88\x21\x32\x52\xe4\xa0\x40\xe3\xee\x30\x2c\x70\x0a\xdc\xa2\xbd\xbd\x10\xc9\xf2\xbb\x47\x44\x24\x55\xba\x5d\x69\x76\x66\xbf\x71\xd3\xcc\xa2\x78\x1e\x79\xc9\xd3\xaa\xbe\x8e\x54\x6a\xfd\xee\x7c\x8f\x4e\x78\xc2\xc3\x67\x9e\x66\xe7\x2a\xaf\x2e\x55\xf2\xf4\x92\x25\x69\xfa\x96\x95\xa5\x31\x87\x03\xaa\xc1\x05\x84\x46\xdc\xac\x10\xd2\x28\x3e\x40\x07\x82\x27\x5d\x58\xbe\x2d\x92\xb6\x15\x0a\x01\xdc\xa1\x86\xe7\x96\xd6\xbb\x0b\x47\x4c\x31\x28\x3a\x37\x8e\x70\x1e\xf6\x96\x15\xaf\xc7\x53\x71\x4a\xca\xec\x6e\xb1\x38\x1d\xb0\x0a\xed\x31\x8a\x90\x57\xbb\x87\x2d\x84\x3e\x1c\xc7\x60\xf7\x60\x59\x57\x9e\x39\x50\xbb\xa9\xd7\xd8\x86\x45\xa8\x51\xcc\x43\x1d\xc8\x98\x39\x5e\xd1\x45\x8f\xa9\x76\xfe\xdf\x1a\x9d\xa7\x8f\x28\x55\x9c\xef\x77\x3f\x03\x6e\x06\xc0\xf6\xfc\x1f\x15\xfc\xef\x49\xcf\xdc\xd2\xf9\x97\x68\x03\xda\x0c\x77\xe6\xfe\x15\x00\x00\xff\xff\x57\xb3\x8a\xcc\x3f\x01\x00\x00"

func TransactionsIdtablestakingGet_node_networking_addrCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingGet_node_networking_addrCdc,
		"../../../transactions/idTableStaking/get_node_networking_addr.cdc",
	)
}

func TransactionsIdtablestakingGet_node_networking_addrCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingGet_node_networking_addrCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/get_node_networking_addr.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0x3c, 0xe2, 0x59, 0x21, 0x3d, 0xfd, 0x16, 0xc5, 0xfa, 0xbd, 0x34, 0xd8, 0xf9, 0x7d, 0xf2, 0x2b, 0x73, 0xc0, 0x10, 0x99, 0x79, 0xbd, 0xe2, 0xec, 0xe0, 0xed, 0xe1, 0x8a, 0x6d, 0xb8, 0xcd}}
	return a, nil
}

var _TransactionsIdtablestakingGet_node_networking_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x6e\xab\x40\x10\x45\xfb\xfd\x8a\x5b\x3e\x4b\xd6\x73\xea\x74\x8e\x21\x32\x4a\xe4\x58\x81\xc6\xdd\x62\x18\x60\x65\xd8\x41\xb3\xb3\x21\x96\xe5\x7f\x8f\x88\x48\xaa\x74\x33\xd2\x9d\x7b\xe6\xb8\x61\x64\x51\x3c\xf7\x3c\x65\x49\x51\x9e\x7b\xca\xb5\xbc\x38\xdf\xa2\x11\x1e\xf0\xf0\x99\x25\xe9\xa1\xc8\x8a\x53\xb1\x7d\x7a\x4d\xb7\x49\xf2\x9e\xe6\xb9\x31\x9b\x0d\x8a\xce\x05\x84\x4a\xdc\xa8\x10\xd2\x28\x3e\x40\x3b\x82\x27\x9d\x58\xbe\x2b\x2e\x74\x05\x37\x28\xe1\xb9\xa6\xf9\xe6\xc4\x11\x43\x0c\x8a\xc6\xf5\x3d\x9c\x87\xbd\xa5\xc7\xb7\xdd\xfe\xb8\xdf\xe6\xe9\xdd\x62\x72\xda\x61\x0e\xda\x5d\x14\x21\xaf\x76\x0d\x7b\x14\xfa\x70\x1c\x83\x5d\x83\x65\x5e\x79\xe4\x40\xf5\x92\x9e\x91\x15\x8b\x50\xa5\x18\xbb\x32\x90\x31\x63\x3c\xa3\x89\x1e\x43\xe9\xfc\xbf\x19\x9d\x25\x8f\xc8\x55\x9c\x6f\x57\x3f\x03\x6e\x06\xc0\xf2\xf8\x1f\xfa\xff\x5b\xd2\x03\xd7\x74\xf8\xb5\x79\xa1\xeb\x52\xb6\x32\xf7\xaf\x00\x00\x00\xff\xff\x9d\x97\xac\xdd\x37\x01\x00\x00"

func TransactionsIdtablestakingGet_node_networking_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingGet_node_networking_keyCdc,
		"../../../transactions/idTableStaking/get_node_networking_key.cdc",
	)
}

func TransactionsIdtablestakingGet_node_networking_keyCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingGet_node_networking_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/get_node_networking_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0x94, 0x9f, 0xb3, 0xb, 0x6f, 0x4a, 0xb3, 0x5c, 0x79, 0x75, 0x88, 0xb5, 0xa5, 0xd8, 0x33, 0x87, 0x70, 0xc4, 0x36, 0x65, 0x3d, 0x76, 0xd7, 0xd, 0x95, 0x6f, 0x1b, 0xd, 0x85, 0xd3, 0x9}}
	return a, nil
}

var _TransactionsIdtablestakingGet_node_roleCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x6a\xc3\x40\x10\x44\xfb\xfb\x8a\x29\x63\x30\x71\xca\xe0\xce\xb1\x14\x2c\x08\x8e\xb1\x94\xc2\xdd\xc9\xd2\x4a\x3a\x72\xba\x15\x7b\x7b\x71\xc0\xf8\xdf\x83\x40\x65\xca\x81\xc7\xbc\x19\x37\x4e\x2c\x8a\x77\xcf\xb7\x22\xab\xea\xab\xa7\x52\xeb\x6f\x17\x7a\x74\xc2\x23\x5e\x7e\x8b\x2c\x3f\x56\x45\x75\xa9\x76\x6f\x1f\xf9\x2e\xcb\xce\x79\x59\x1a\xb3\xd9\xa0\x1a\x5c\x44\x6c\xc4\x4d\x0a\x21\x4d\x12\x22\x74\x20\x08\x7b\x02\x77\xa8\x11\xb8\xa5\x99\xbc\x70\xc2\x98\xa2\xa2\x73\xde\xc3\x05\xd8\x7b\x7e\xfa\xdc\x1f\x4e\x87\x5d\x99\x3f\x2c\x6e\x4e\x07\xcc\xa0\xdd\x27\x11\x0a\x6a\xd7\xb0\x27\xa1\x1f\xc7\x29\xda\x35\x58\xe6\xc8\x13\x47\x6a\x17\x7a\x16\x35\x2c\x42\x8d\x62\x1a\xea\x48\xc6\x4c\xe9\x8a\x2e\x05\x8c\xb5\x0b\x4f\xb3\xba\xc8\xb6\x28\x55\x5c\xe8\x57\x5b\x7c\x15\x41\x5f\x71\x37\x00\x96\xb5\xff\x7c\x7e\xee\x49\x8f\xdc\xd2\x99\x3d\x2d\x15\x2b\xf3\xf8\x0b\x00\x00\xff\xff\x67\x46\xfb\xc7\x23\x01\x00\x00"

func TransactionsIdtablestakingGet_node_roleCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingGet_node_roleCdc,
		"../../../transactions/idTableStaking/get_node_role.cdc",
	)
}

func TransactionsIdtablestakingGet_node_roleCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingGet_node_roleCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/get_node_role.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0x94, 0x34, 0x4a, 0x1a, 0xb, 0x5e, 0x50, 0xb3, 0xef, 0x1f, 0xc5, 0x4e, 0xe8, 0xad, 0xe3, 0x22, 0x39, 0x82, 0xb8, 0xe8, 0x9d, 0x45, 0xa, 0x3e, 0xe6, 0xb2, 0x40, 0x90, 0x6c, 0x4, 0x18}}
	return a, nil
}

var _TransactionsIdtablestakingGet_node_stakedtokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xd0\x71\x0d\x47\x81\x28\xae\xbb\xc8\x41\xb2\x84\x52\x60\x53\x50\x3a\xf1\x26\xb1\x92\xac\x23\x7b\x23\x90\x10\xff\x8e\x02\x29\xaf\x9c\x57\xbc\x79\x71\x59\x53\x16\xbc\xcc\xe9\xd3\x68\xe7\xdb\x99\xac\xf8\x29\xf2\x80\x3e\xa7\x05\x8f\x5f\x46\xd7\x8d\x33\xee\xc3\x5d\xab\xd7\xfa\xaa\xf5\x5b\x6d\xad\x52\xe7\x33\xdc\x18\x0b\x4a\x97\xe3\x2a\xc8\x24\x5b\xe6\x02\x19\x09\xad\x9f\x3d\x77\x84\xd4\xa3\x88\x9f\x28\x40\xd2\x44\x5c\x76\xe0\xc1\x29\x90\x52\xeb\xd6\xa2\xdf\x18\x8b\x8f\x7c\xbf\x23\xa3\x2f\xb0\x92\x23\x0f\xa7\x0b\xde\x0d\xcb\xf3\x13\xbe\x15\x80\x43\x7d\x23\xf0\x61\x20\x69\x52\xf8\x9b\x14\xaa\xff\xd7\x43\x76\xba\x53\x3f\xbf\x01\x00\x00\xff\xff\xaa\x8a\x74\x64\xda\x00\x00\x00"

func TransactionsIdtablestakingGet_node_stakedtokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingGet_node_stakedtokensCdc,
		"../../../transactions/idTableStaking/get_node_stakedTokens.cdc",
	)
}

func TransactionsIdtablestakingGet_node_stakedtokensCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingGet_node_stakedtokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/get_node_stakedTokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0x99, 0x50, 0x4e, 0xfc, 0x5d, 0xe2, 0x61, 0x4, 0xcc, 0x4c, 0x78, 0xc5, 0x36, 0x2e, 0x12, 0xb5, 0x6a, 0x16, 0x17, 0x83, 0xa4, 0x79, 0xa6, 0x50, 0xe3, 0x29, 0x31, 0xd7, 0x88, 0x3a, 0x4c}}
	return a, nil
}

var _TransactionsIdtablestakingGet_node_staking_keyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x6b\x83\x40\x10\x85\xef\xfb\x2b\xde\xb1\x81\xd0\xf4\xdc\x5b\x1a\x2d\x91\x94\x54\xaa\x97\xdc\xd6\xe8\xa8\x4b\x75\x47\x66\x67\x9b\x86\x90\xff\x5e\x04\x73\xeb\x6d\x1e\xbc\x6f\xbe\x19\x37\x4e\x2c\x8a\xf7\x81\x2f\x59\x52\x56\xe7\x81\x0a\xad\xbe\x9d\xef\xd0\x0a\x8f\x78\xf9\xcd\x92\xf4\x58\x66\xe5\xa9\xdc\xbe\x7d\xa4\xdb\x24\xf9\x4a\x8b\xc2\x98\xcd\x06\x65\xef\x02\x42\x2d\x6e\x52\x08\x69\x14\x1f\xa0\x3d\x21\x2c\xfc\x81\xae\xe0\x16\x15\x3c\x37\x34\x03\x27\x8e\x18\x63\x50\xb4\x6e\x18\xe0\x3c\xec\x2d\xcd\x3f\x77\xfb\x7c\xbf\x2d\xd2\xbb\xc5\xc5\x69\x8f\xb9\x68\x77\x51\x84\xbc\xda\x35\x6c\x2e\xf4\xe3\x38\x06\xbb\x06\xcb\x1c\x79\xe2\x40\xcd\xd2\x9e\x7d\x35\x8b\x50\xad\x98\xfa\x2a\x90\x31\x53\x3c\xa3\x8d\x1e\x63\xe5\xfc\xd3\xac\xce\x92\x57\x14\x2a\xce\x77\xab\xc7\x80\x9b\x01\xb0\x5c\xfd\xcf\xef\xcf\x1d\xe9\x91\x9b\x47\x3c\xd0\x75\xd9\xb4\x32\xf7\xbf\x00\x00\x00\xff\xff\xc3\x41\x5c\x88\x31\x01\x00\x00"

func TransactionsIdtablestakingGet_node_staking_keyCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingGet_node_staking_keyCdc,
		"../../../transactions/idTableStaking/get_node_staking_key.cdc",
	)
}

func TransactionsIdtablestakingGet_node_staking_keyCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingGet_node_staking_keyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/get_node_staking_key.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0x76, 0xd, 0xe2, 0xc8, 0x61, 0xdd, 0x38, 0x4b, 0xbd, 0xb1, 0x5c, 0xf2, 0x28, 0xff, 0xdd, 0x38, 0x86, 0x11, 0x8c, 0xdb, 0x34, 0x34, 0x24, 0x69, 0x6, 0xe9, 0x66, 0xf, 0xd3, 0x9c, 0xe2}}
	return a, nil
}

var _TransactionsIdtablestakingGet_node_unlockedtokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x4f\xc3\x30\x10\x46\x77\xff\x8a\x8f\x8d\x2e\x94\x01\x31\x74\x6b\xe5\x20\x59\x42\x1d\x88\x3b\x30\x3a\xc9\x25\xb5\xe2\xdc\x45\xf6\x59\x20\x21\xfe\x3b\xaa\xc8\xd8\xf5\x0d\xef\xbd\xb8\xac\x92\x15\x6f\x49\xbe\x9c\xf5\xa1\x4b\xd4\x6a\x98\x23\x4f\x18\xb3\x2c\x78\xfe\x76\xb6\x39\x7b\xe7\x3f\xfd\xf1\xf4\xde\x1c\xad\xfd\x68\xda\xd6\x98\xfd\x1e\xfe\x1a\x0b\x4a\x9f\xe3\xaa\xc8\xa4\x35\x73\x81\x5e\x09\x5d\x48\x81\x7b\x82\x8c\xa8\x9c\xa4\x9f\x69\x80\xca\x4c\x5c\x6e\x28\x80\x65\x20\x63\xd6\xda\x61\xac\x8c\x25\x44\x7e\xbc\x21\x67\x0f\x68\x35\x47\x9e\x76\x07\x5c\x1c\xeb\xeb\x0b\x7e\x0c\x80\x4d\x7e\x67\xf1\x69\x22\x3d\xcb\x40\x97\x2d\x73\xfa\x2f\x6f\xba\xdd\x83\xf9\xfd\x0b\x00\x00\xff\xff\xc8\xf2\xc8\x70\xde\x00\x00\x00"

func TransactionsIdtablestakingGet_node_unlockedtokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingGet_node_unlockedtokensCdc,
		"../../../transactions/idTableStaking/get_node_unlockedTokens.cdc",
	)
}

func TransactionsIdtablestakingGet_node_unlockedtokensCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingGet_node_unlockedtokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/get_node_unlockedTokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x37, 0x2f, 0xa9, 0xf3, 0x69, 0xb0, 0x8f, 0x74, 0xe0, 0x35, 0x1e, 0x2b, 0xdf, 0x1e, 0xad, 0xda, 0x76, 0x10, 0x65, 0xfd, 0x47, 0x35, 0x61, 0x20, 0x5b, 0x41, 0x81, 0xa9, 0x50, 0x91, 0x71}}
	return a, nil
}

var _TransactionsIdtablestakingGet_node_unstakedtokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x4f\x85\x30\x14\x46\xf7\xfe\x8a\xcf\xcd\xb7\xf8\x1c\x8c\xc3\xdb\xde\x4b\x31\x69\x62\x18\x6c\x19\x1c\x0b\x5c\xa0\x01\x6e\x49\x7b\x1b\x4d\x8c\xff\xdd\xa0\x8c\xae\x67\x38\xe7\x84\x75\x8b\x49\xf0\xb2\xc4\x0f\xa3\x9d\x6f\x17\xb2\xe2\xe7\xc0\x23\x86\x14\x57\x3c\x7e\x1a\x5d\xd5\xce\xb8\x77\x77\xbd\xbd\x56\x57\xad\xdf\x2a\x6b\x95\x3a\x9f\xe1\xa6\x90\x91\xbb\x14\x36\x41\x22\x29\x89\x33\x64\x22\xb4\x7e\xf1\xdc\x11\xe2\x80\xc2\x59\xfc\x4c\x3d\x24\xce\xc4\x79\x47\x1e\x1c\x7b\x52\x6a\x2b\x2d\x86\xc2\x58\x7d\xe0\xfb\x1d\x19\x7d\x81\x95\x14\x78\x3c\x5d\xd0\x18\x96\xe7\x27\x7c\x29\x00\x87\xfc\x9f\xc5\x87\x91\xa4\x8e\x3d\x35\x6c\x7f\x33\xb7\xbf\xf2\xa1\x3b\xdd\xa9\xef\x9f\x00\x00\x00\xff\xff\x06\xed\x85\x4e\xde\x00\x00\x00"

func TransactionsIdtablestakingGet_node_unstakedtokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingGet_node_unstakedtokensCdc,
		"../../../transactions/idTableStaking/get_node_unstakedTokens.cdc",
	)
}

func TransactionsIdtablestakingGet_node_unstakedtokensCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingGet_node_unstakedtokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/get_node_unstakedTokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x30, 0xc3, 0x87, 0x90, 0x7b, 0xe4, 0x29, 0x54, 0xfa, 0xa4, 0x8c, 0xb9, 0x7c, 0x59, 0xbf, 0x1f, 0x1b, 0xf7, 0xd1, 0x38, 0xe7, 0x2d, 0x71, 0xa, 0xcf, 0x61, 0x56, 0x50, 0xd9, 0xd2, 0xc4, 0x80}}
	return a, nil
}

var _TransactionsIdtablestakingRemove_nodeCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4f\xcf\x9a\x40\x10\xc6\xef\x7c\x8a\x27\x1e\x1a\xbc\xb0\x3d\x93\xb6\x86\x16\x9b\x90\x18\x0f\xc2\xa5\xc7\x75\x19\x74\x5b\xd8\x21\xcb\xa0\x36\x8d\xdf\xbd\x59\xd0\x37\xfa\xfe\x99\xe3\x66\x9e\xdf\xfc\x66\xc7\x76\x3d\x7b\xc1\xcf\x96\xcf\x45\x5e\xe9\x7d\x4b\xa5\xe8\x3f\xd6\x1d\xd0\x78\xee\xf0\xf9\x52\xe4\xeb\x6d\x55\x54\xbf\xaa\xec\xfb\x66\x9d\xe5\xf9\x6e\x5d\x96\x51\xa4\x14\xaa\xa3\x1d\x20\x5e\xbb\x41\x1b\xb1\xec\xe0\xa9\xe3\x13\x0d\xd0\x0e\x74\xb1\x83\x04\x88\xe3\x9a\x66\x92\x1c\x09\xb6\x26\x27\x56\xfe\x42\xc2\xa0\x28\x7a\x48\xc7\xb6\x4e\x51\x8a\xb7\xee\xb0\xc4\xbf\x28\x02\x00\xa5\xb0\x61\xa3\x5b\x9c\xb4\xb7\x21\x81\x86\x3d\x34\x3c\x35\xe4\xc9\x19\x82\xf0\xc4\x2d\x72\x4c\xea\xc8\xea\xce\x3a\xf0\xfe\x37\x19\x99\x10\x2d\x09\x74\x78\xdc\x51\x93\xe2\xd3\xdb\x35\x93\x29\x32\xcf\xeb\x3d\xf5\xda\x53\xac\x8d\x91\x14\xd9\x28\xc7\xcc\x18\x1e\x9d\x04\x23\xdc\x4a\x29\xec\xd9\x7b\x3e\xbf\x27\xa2\x5f\xcf\x0f\x35\x50\xdb\x24\x77\x09\x7c\x45\xc0\x27\x33\xe3\xcb\x87\x46\xdf\xe2\xf0\x6b\x29\xd4\x20\xec\xf5\x81\x54\xd3\xf2\xf9\xd6\x31\x35\x2c\x5f\xf8\xa1\x56\x2b\xf4\xda\x59\x13\x2f\x7e\xf0\xd8\xd6\x70\x2c\x77\xcd\x27\xc9\xe1\x76\xdc\x49\x67\x31\x33\xae\xf3\xf6\x74\x21\x33\x0a\x3d\xac\xfa\x24\x9e\xcc\xe7\xdd\x72\x4d\xb1\xad\xef\xc9\xeb\xff\x00\x00\x00\xff\xff\x6a\x98\xd8\xba\x40\x02\x00\x00"

func TransactionsIdtablestakingRemove_nodeCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingRemove_nodeCdc,
		"../../../transactions/idTableStaking/remove_node.cdc",
	)
}

func TransactionsIdtablestakingRemove_nodeCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingRemove_nodeCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/remove_node.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0xbf, 0x5e, 0xa0, 0xe2, 0xa5, 0xbf, 0x0, 0x88, 0x30, 0x7, 0xea, 0xf3, 0xd8, 0x9c, 0x93, 0x50, 0x80, 0xc3, 0xa2, 0x20, 0x50, 0xd7, 0x88, 0x80, 0xec, 0x90, 0x42, 0x11, 0x7a, 0xf3, 0xc2}}
	return a, nil
}

var _TransactionsIdtablestakingStake_new_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcf\x8e\xd3\x40\x0c\xc6\xef\x79\x0a\x6b\x0f\x28\x95\x96\x84\x03\xe2\x10\x2d\xac\x02\x69\xa5\x88\xaa\x2b\x6d\x03\x88\xa3\x3b\x71\xda\xa1\xe9\xb8\x72\x1c\x5a\x09\xf5\xdd\x51\x26\xa4\xa4\xb4\xe2\xb0\x73\x19\x47\xfe\x93\xdf\xe7\xf9\xec\x6e\xcf\xa2\x30\xab\xf9\x90\x67\x05\xae\x6a\x5a\x2a\x6e\xad\x5b\x43\x25\xbc\x83\x37\xc7\x3c\x9b\x2e\x8a\xbc\xf8\x5e\xa4\x1f\xe7\xd3\x34\xcb\x9e\xa7\xcb\x65\x30\xea\x2a\x78\x4b\x6e\x28\x9e\xcd\x9f\xbe\x15\x4f\x9f\xa7\x8b\xa1\x30\x08\x54\xd0\x35\x68\xd4\xb2\x0b\x6d\x99\xc0\x52\xc5\xba\xf5\x3d\x04\x30\x3a\xb8\xe3\xd6\x69\x02\x5f\x66\xf6\xf8\xee\xed\x04\x7e\x05\x3e\x1d\xc7\x30\x67\x83\x35\xfc\x44\xb1\x1d\x1b\x54\x2c\x80\x20\x54\x91\x90\x33\x04\xca\xa0\x1b\x82\x3c\x03\xcf\x0e\x69\xb9\xb3\x0e\x78\xf5\x83\x8c\xfa\x11\x35\x29\x34\x8a\x5b\x92\x67\xaa\x12\x78\x75\x2d\x34\x5a\x70\xe9\x63\x92\xe0\xdc\x52\x0d\xca\xfe\x76\xf9\xcf\xe8\x2b\xb6\xb5\xf6\x75\x7b\xa1\x3d\x0a\x85\x68\x8c\x26\x90\xb6\xba\x49\x8d\xe9\x74\x74\xfc\x83\xb2\x38\x86\x15\x8b\xf0\xe1\x16\x36\xfe\x4b\xdb\x9d\x86\xea\x2a\x3a\x23\xc3\x7b\xe8\xe6\x47\xfd\x90\x87\xff\xf3\x7f\x08\xbb\x77\x48\x20\x6e\x94\x05\xd7\x14\x77\x32\xfa\xd4\xe4\x62\xdf\x8f\x8f\xb0\x47\x67\x4d\x78\xf7\x89\xdb\xba\x04\xc7\x3a\x60\x5e\x40\x36\x7f\xbc\xe0\x41\xef\x26\xc1\x25\xe4\x78\x49\xb7\x38\x47\x1b\xbb\x49\xe6\xf3\x3e\xfd\x32\xba\xce\x6d\xe0\xfb\x07\xb4\x53\x7f\xd1\x91\x4c\xab\x34\xd8\xe8\x7a\xab\x7d\xb4\xa0\x1e\xa1\x09\x1d\x97\x94\x67\x09\xd8\xf2\x1e\x1e\x5e\x5f\x89\x8b\x0e\x56\x37\xa5\xe0\x21\x1c\x8c\xda\xdf\x93\xf3\x6f\x4f\xbf\x03\x00\x00\xff\xff\x4c\xdd\xde\xc0\x48\x03\x00\x00"

func TransactionsIdtablestakingStake_new_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingStake_new_tokensCdc,
		"../../../transactions/idTableStaking/stake_new_tokens.cdc",
	)
}

func TransactionsIdtablestakingStake_new_tokensCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingStake_new_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/stake_new_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0x3, 0xee, 0x32, 0x12, 0x93, 0x86, 0x29, 0x27, 0x11, 0x14, 0x79, 0x36, 0xa8, 0xe2, 0x4c, 0x93, 0x1d, 0x79, 0xe8, 0x30, 0x83, 0x70, 0x7c, 0x98, 0xe0, 0x40, 0xc8, 0x17, 0x34, 0x0, 0x3}}
	return a, nil
}

var _TransactionsIdtablestakingStake_unlocked_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func TransactionsIdtablestakingStake_unlocked_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingStake_unlocked_tokensCdc,
		"../../../transactions/idTableStaking/stake_unlocked_tokens.cdc",
	)
}

func TransactionsIdtablestakingStake_unlocked_tokensCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingStake_unlocked_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/stake_unlocked_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _TransactionsIdtablestakingTransfer_minter_deployCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6f\xd3\x40\x10\x3d\x7b\x7f\xc5\x53\x0f\xc8\x96\x5a\xdb\x50\x3e\xad\x94\x2a\x44\x42\x42\x08\x84\x10\x9c\xaa\x1e\x36\xeb\x71\x6b\xc5\xd9\xb1\xc6\x63\x42\x54\xe5\xbf\xa3\xf5\xba\x04\x0a\x87\xfa\xe6\x99\x37\x6f\xde\x7b\xb3\xed\xb6\x67\x51\xbc\xef\x78\xf7\x8d\x37\xe4\xd1\x08\x6f\x51\xfe\x2c\x2d\xbd\x38\x77\xeb\x97\x74\xde\x3c\x7f\x66\x5f\xbd\x31\x46\xc5\xfa\xc1\x3a\x6d\xd9\xa7\xfd\xb8\xee\x5a\xf7\x91\xf6\x43\x85\xab\xab\xef\x1f\xbc\xbe\xbe\xbe\x3e\x85\xe3\x9a\x2a\xcc\xff\x19\xee\x8c\x01\x7a\xa1\xde\x0a\xa5\x43\x7b\xe3\x49\x2a\x2c\x47\xbd\x5d\x3a\xc7\xa3\xd7\x09\x91\x74\xa4\xb0\xce\x29\x2e\xfe\xec\xa5\xbd\xdd\x07\x78\x1c\xcb\x0c\x00\x98\xa4\x61\xc1\x86\xf6\x68\x3d\x8e\x12\x70\x67\x92\x24\x30\xe4\xb6\xae\xbf\xdc\x97\xd3\x0d\xed\x33\x93\x1c\xcc\x34\x5a\x14\x05\xde\xb1\x08\xef\x60\x21\xd4\x90\x90\x77\x04\x65\xe8\x2d\x4d\xee\x11\xed\x2f\xeb\x6d\xeb\x03\x7f\xa8\xdb\xa8\x05\x83\xb2\xd8\x1b\x9a\x98\x82\xdc\xe6\x3e\xad\x88\xbe\x98\x55\xe6\xeb\x69\xc3\xe2\xc9\xef\x34\xf3\x09\xd0\x0e\x2a\x56\x59\xde\xa6\x21\xdc\x0a\xc5\xcc\x57\xfc\xcd\x13\x4d\x86\xef\xf2\x12\xbd\xf5\xad\x4b\x4f\x56\x3c\x76\x35\x3c\x2b\xd6\x8f\x57\x2f\x34\xf0\x28\x8e\x4e\xb2\xa3\xf9\x95\x90\x55\x82\x3d\x6a\xff\xd4\x7a\x25\xf9\x3a\x63\xff\xf5\x16\xfb\x58\x9c\x3d\xb0\x9b\xbb\x89\xea\x33\xed\x22\x22\xb5\x5d\xc7\x3b\xaa\x97\xdb\x90\x55\x85\xa7\x65\x99\x97\xf3\xe6\xe9\x2a\x83\xfd\x41\xe9\xe2\xec\x01\xf1\x29\x94\xff\x17\x45\xec\x66\xc6\xc4\x93\x0e\xa4\x2b\xae\x29\x0d\x4f\x2b\x04\x74\x30\xe6\x60\xf0\x2b\x00\x00\xff\xff\x27\x72\xd1\x70\xb6\x02\x00\x00"

func TransactionsIdtablestakingTransfer_minter_deployCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingTransfer_minter_deployCdc,
		"../../../transactions/idTableStaking/transfer_minter_deploy.cdc",
	)
}

func TransactionsIdtablestakingTransfer_minter_deployCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingTransfer_minter_deployCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/transfer_minter_deploy.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0xed, 0x17, 0xe0, 0x12, 0x11, 0x6d, 0x47, 0xe1, 0x24, 0x32, 0x38, 0x60, 0xb5, 0x2c, 0xcd, 0x2e, 0xdd, 0x28, 0xed, 0xeb, 0xc0, 0xb2, 0x6, 0x18, 0x4b, 0xea, 0x7b, 0x33, 0xb1, 0x6, 0x3c}}
	return a, nil
}

var _TransactionsIdtablestakingUnstake_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func TransactionsIdtablestakingUnstake_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingUnstake_tokensCdc,
		"../../../transactions/idTableStaking/unstake_tokens.cdc",
	)
}

func TransactionsIdtablestakingUnstake_tokensCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingUnstake_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/unstake_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _TransactionsIdtablestakingWithdraw_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func TransactionsIdtablestakingWithdraw_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsIdtablestakingWithdraw_tokensCdc,
		"../../../transactions/idTableStaking/withdraw_tokens.cdc",
	)
}

func TransactionsIdtablestakingWithdraw_tokensCdc() (*asset, error) {
	bytes, err := TransactionsIdtablestakingWithdraw_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/idTableStaking/withdraw_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _TransactionsInspect_fieldCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xc1\x09\x42\x31\x0c\x06\xe0\x7b\xa7\xf8\x8f\x7a\x91\x22\x5a\x1f\xde\xbc\x74\x01\x71\x80\xbe\x9a\x42\xc0\x26\x8f\x98\xea\x03\x71\x77\x17\x70\x81\x8f\xfb\xa2\xe6\xc8\x0f\x7d\x5f\xc9\x5e\x5c\xe9\x52\xab\x0e\x71\x34\xd3\x8e\xb8\xb6\xe9\x9e\x28\x1e\xa7\x34\xc7\xb2\x8f\xf5\x14\xc2\x32\x66\xb4\x21\xe8\x85\x65\xb3\x3d\xe3\x96\x79\x4d\x07\x7c\x02\x00\x18\xf9\x30\xf9\xe3\xed\xdc\x8a\x3c\x4b\x75\x56\xc9\x44\xe1\xfb\x0b\x00\x00\xff\xff\x7c\xe1\x51\x3b\x7a\x00\x00\x00"

func TransactionsInspect_fieldCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsInspect_fieldCdc,
		"../../../transactions/inspect_field.cdc",
	)
}

func TransactionsInspect_fieldCdc() (*asset, error) {
	bytes, err := TransactionsInspect_fieldCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/inspect_field.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0xeb, 0x82, 0x68, 0x87, 0xc8, 0xaf, 0x97, 0x60, 0xf6, 0x63, 0x18, 0x23, 0x85, 0x7b, 0xb6, 0xf6, 0xbb, 0x8c, 0x4d, 0x40, 0x9c, 0x25, 0xc, 0xc5, 0x56, 0xa, 0xdf, 0x63, 0xa8, 0x28, 0xea}}
	return a, nil
}

var _TransactionsQcCreate_qc_objectCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\xae\x9b\x40\x0c\x85\xf7\x3c\x85\x7b\x17\x15\x48\xbd\xd0\x35\xca\x6d\x84\x26\xed\xaa\x6a\x45\xf2\x04\x66\x30\xc9\x54\xc3\x18\x19\x93\xb4\xaa\xf2\xee\x15\x3f\x89\x42\x15\x5d\xaf\xe6\xc7\xc7\xfe\xce\x71\x6d\xc7\xa2\xf0\xcd\xf3\xa5\x1c\x58\x86\xd6\x90\xa8\x6b\x9c\x45\x25\x68\x84\x5b\xf8\xfc\xbb\x34\xc5\x6e\xb7\xff\x7a\x38\x44\x51\xa4\x82\xa1\x47\xab\x8e\x43\x8c\x75\xeb\x42\x51\xd7\x42\x7d\x9f\xc3\x72\x48\xe0\x6f\x04\x00\x90\x65\xf0\x9d\x2d\x7a\x38\xa3\x38\xac\x3c\x41\xc3\x02\x08\x42\x0d\x09\x05\x4b\xa0\x0c\x7a\x22\x28\x0d\x14\xe3\x20\xe0\xea\x17\x59\x9d\xc4\x9e\x14\xa6\xe9\x7b\x6a\x72\xf8\xf8\x94\x2e\x9d\x54\xd1\xd4\xdf\x09\x75\x28\x14\xa3\xb5\x9a\x43\x31\xe8\xa9\xb0\x96\x87\xa0\x37\x9a\xd5\xd0\xe5\x0f\xde\xe0\x48\xba\x5c\x56\x66\x92\xe8\x2e\xca\x32\xa8\x58\x84\x2f\xcf\xd0\xf1\x7f\xee\xb1\x7a\xf2\x4d\x7a\x83\x87\xb7\xd5\xca\xf4\x48\x6a\xb0\xc3\xca\x79\xa7\x7f\x36\xef\x19\xfb\x12\x67\xdd\x50\x79\x67\xb3\x66\x6c\x32\xd3\x63\xf2\x21\x9d\x69\xe2\xe4\xbe\x6f\xac\xed\x16\x3a\x0c\xce\xc6\x2f\x86\x07\x5f\x43\x60\xbd\x61\xaf\xa0\x4b\x33\xe3\xbc\x3c\x38\x1c\x63\x09\x74\xf9\xc1\x35\xc1\xe6\x75\x8d\x9f\x5a\x21\x54\x2a\xcd\xcf\xc9\x63\xfc\x20\x1b\xa3\x4e\x7b\x3c\x53\xbc\x79\x5d\xe4\x9f\x40\x39\x87\xac\x57\x16\x3c\xd2\xc2\x3d\xa7\x33\xe3\x5e\xa3\xeb\xbf\x00\x00\x00\xff\xff\xbc\x5f\x36\xda\x70\x02\x00\x00"

func TransactionsQcCreate_qc_objectCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsQcCreate_qc_objectCdc,
		"../../../transactions/qc/create_qc_object.cdc",
	)
}

func TransactionsQcCreate_qc_objectCdc() (*asset, error) {
	bytes, err := TransactionsQcCreate_qc_objectCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/qc/create_qc_object.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x26, 0x2a, 0x17, 0x92, 0x83, 0xe, 0x4c, 0x3d, 0xe3, 0xec, 0x78, 0xd9, 0x94, 0xaa, 0xce, 0x24, 0x84, 0x3, 0xee, 0xf1, 0x4a, 0x98, 0xf8, 0x38, 0xde, 0x50, 0xec, 0x6d, 0x70, 0x71, 0x37}}
	return a, nil
}

var _TransactionsQcGet_all_votesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\x8f\xed\x22\xce\x6e\xa5\xd5\x3d\x06\x5c\x4a\x87\x2a\x97\x72\x90\xe4\xca\x79\x87\x82\xf8\xee\xbe\x80\x2f\xf0\x71\xdd\x45\x0d\x97\x22\xaf\xe8\xa2\x5e\x47\x52\xe3\xcc\x8f\xd5\x08\x59\xa5\xe2\xf8\x8e\xe3\x30\x4d\xd7\x73\x4a\x21\xec\x7e\x47\xf6\x86\xba\x72\xeb\xfa\x13\xe6\x39\x99\x72\xdb\x96\x05\x9f\x00\x00\x4a\xe6\xda\xfe\x7b\x87\x8d\x6c\x28\x25\x8e\x37\x31\x7a\x76\x7d\xf8\xfe\x02\x00\x00\xff\xff\x25\x7c\xbf\xbd\x7e\x00\x00\x00"

func TransactionsQcGet_all_votesCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsQcGet_all_votesCdc,
		"../../../transactions/qc/get_all_votes.cdc",
	)
}

func TransactionsQcGet_all_votesCdc() (*asset, error) {
	bytes, err := TransactionsQcGet_all_votesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/qc/get_all_votes.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0x2e, 0xc8, 0x41, 0xbd, 0xf7, 0xcc, 0x7a, 0x59, 0x5c, 0x70, 0x4b, 0xed, 0x1a, 0x69, 0x91, 0x24, 0x71, 0x21, 0xd5, 0xf, 0x68, 0x26, 0xbd, 0xf1, 0xad, 0x8, 0x42, 0xf, 0xb2, 0x56, 0x34}}
	return a, nil
}

var _TransactionsQcGet_clustersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\x8f\xed\x22\xce\x6e\x92\xea\x5e\x33\x96\x0e\xb5\x5c\xca\x41\x92\x2b\xd7\x3b\x14\xc4\x77\xf7\x05\x7c\x81\x8f\xeb\x2e\x6a\xb8\x17\x79\x8d\x2e\xea\x35\x92\x1a\x67\x5e\x17\x23\x64\x95\x8a\xf3\x7b\x8c\xd7\x61\x78\xdc\x52\x0a\x61\xf7\x27\xb2\x37\xd4\x85\x5b\xd7\x5f\x30\x4d\xc9\x94\xdb\x36\xcf\xf8\x04\x00\x50\x32\xd7\xf6\xdf\x3b\x6d\x64\x51\x4a\xa1\xd5\x44\x63\xf1\xc3\x48\x8f\xae\x0f\xdf\x5f\x00\x00\x00\xff\xff\x94\xf7\x93\x87\x85\x00\x00\x00"

func TransactionsQcGet_clustersCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsQcGet_clustersCdc,
		"../../../transactions/qc/get_clusters.cdc",
	)
}

func TransactionsQcGet_clustersCdc() (*asset, error) {
	bytes, err := TransactionsQcGet_clustersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/qc/get_clusters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0xa0, 0xd4, 0x3f, 0x3f, 0xfe, 0x67, 0xe2, 0xd, 0x19, 0x4d, 0x29, 0xa4, 0xc5, 0x22, 0x8c, 0xcf, 0x76, 0xdf, 0xdd, 0x4c, 0xa1, 0xe0, 0x34, 0x99, 0xc7, 0x50, 0x4f, 0x3f, 0xa3, 0xee, 0xb5}}
	return a, nil
}

var _TransactionsQcGet_votes_in_clusterCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xb1\xca\xc2\x30\x10\x07\xf0\x3d\x4f\xf1\xff\xb6\xaf\x8b\x38\x77\x2b\xa9\x42\xc7\x5a\x70\x11\x87\x5a\x2f\x25\x90\x5c\xca\xf5\x0e\x0b\xe2\xbb\x3b\x38\x09\xbe\xc0\x2f\xe6\xa5\x88\xe2\x98\xca\xa3\xb7\x22\x96\x3d\x89\xc6\x10\xa7\x51\x09\x41\x4a\xc6\x7e\xeb\x7d\xd3\xb6\xa7\xc3\x30\x38\xb7\xd8\x0d\xc1\x18\x79\x8c\xfc\x3f\x25\x5b\x95\xa4\xe3\x3b\x6d\x35\x3a\xd6\xaa\xc6\x65\x50\x89\x3c\x5f\xf1\x74\x00\x20\xa4\x26\xfc\x9b\xdf\xcd\xa4\x4d\x4a\xbd\x3f\x17\xa5\xb5\x63\xff\xe1\xbe\xd8\xea\xcf\xbd\xde\x01\x00\x00\xff\xff\xbe\xb9\xbc\x60\xa3\x00\x00\x00"

func TransactionsQcGet_votes_in_clusterCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsQcGet_votes_in_clusterCdc,
		"../../../transactions/qc/get_votes_in_cluster.cdc",
	)
}

func TransactionsQcGet_votes_in_clusterCdc() (*asset, error) {
	bytes, err := TransactionsQcGet_votes_in_clusterCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/qc/get_votes_in_cluster.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x4e, 0xd8, 0x41, 0xd0, 0xca, 0x52, 0x95, 0xfa, 0xca, 0xaa, 0x2, 0x4, 0x76, 0x3c, 0xea, 0x34, 0xab, 0xca, 0xae, 0xe5, 0x52, 0xc7, 0x23, 0x34, 0xbb, 0xd9, 0x3d, 0x3a, 0xe9, 0x5, 0xad}}
	return a, nil
}

var _TransactionsQcReset_qc_votingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd1\xcd\x6a\xe3\x40\x0c\x07\xf0\xbb\x9f\x42\x9b\xc3\x62\x5f\xec\x3d\x87\x6d\x83\x99\xb4\xa7\x5e\x9c\x40\xef\xf2\x44\x93\x4c\x19\x8f\x8c\xa2\x69\x52\x4a\xde\xbd\xf8\x23\x85\x94\x50\x5d\x0c\xe2\x2f\xeb\x27\xc6\x77\x3d\x8b\xc2\x73\xe0\x53\x93\x58\x52\x67\x48\xd4\x3b\x6f\x51\x09\x9c\x70\x07\xff\xce\x8d\xa9\xd7\xeb\xcd\xd3\x76\x9b\x65\x99\x0a\xc6\x23\x5a\xf5\x1c\xf3\x02\x3e\x33\x00\x80\xaa\x82\x17\xb6\x18\xe0\x1d\xc5\x63\x1b\x08\x1c\x0b\x20\x08\x39\x12\x8a\x96\x40\x19\xf4\x40\xd0\x18\xa8\x77\x9d\x8f\xc0\xed\x1b\x59\x1d\x87\x03\x29\xe0\xd0\xdc\x90\x5b\xc2\xdf\xbb\x90\x72\x9c\xca\xc6\x7c\x2f\xd4\xa3\x50\x8e\xd6\xea\x12\xea\xa4\x87\xda\x5a\x4e\x51\x07\xcd\x98\x98\x49\x2d\x8b\xf0\xe9\x1e\x03\x7f\x1a\x86\x3a\x52\x70\xe5\x15\x02\x0f\x53\x68\xfe\x75\xb9\x27\x35\xd8\x63\xeb\x83\xd7\x8f\xff\xbf\x21\x1f\xf3\xaa\x4f\x6d\xf0\xb6\x72\x43\xc8\x8c\xcd\xe2\x4f\x39\x69\xf2\xe2\x7b\xdf\x50\xab\x15\xf4\x18\xbd\xcd\x17\x86\x53\xd8\x41\x64\xbd\xb2\x6f\xd0\x8d\x99\x38\x8b\x62\xba\xf0\x32\x7d\xe8\x4c\x36\x29\xcd\xaf\x70\x7b\xc4\x7e\x43\xae\x14\x3a\x92\x36\xe6\x95\xd5\xc7\xfd\xbc\xfb\x92\x5d\xbe\x02\x00\x00\xff\xff\xd0\x9e\xd8\xdf\xf4\x01\x00\x00"

func TransactionsQcReset_qc_votingCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsQcReset_qc_votingCdc,
		"../../../transactions/qc/reset_qc_voting.cdc",
	)
}

func TransactionsQcReset_qc_votingCdc() (*asset, error) {
	bytes, err := TransactionsQcReset_qc_votingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/qc/reset_qc_voting.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0x4a, 0x53, 0xcb, 0x77, 0x3b, 0xd7, 0x85, 0x34, 0xe2, 0x57, 0xb1, 0x24, 0xce, 0xef, 0xd7, 0x22, 0x63, 0x89, 0x6c, 0xf2, 0xa0, 0x64, 0x86, 0x17, 0xe, 0x14, 0x3c, 0x9f, 0x1c, 0x55, 0xdb}}
	return a, nil
}

var _TransactionsQcSet_collector_clustersCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcf\x6e\xc2\x30\x0c\x87\xef\x7d\x0a\x8f\xc3\xd4\x5e\xda\x9d\xd1\x36\x54\x85\xed\xb4\x4b\xe1\x88\x38\xa4\xc1\x81\x4c\x69\x5c\xb9\xce\x60\x9a\x78\xf7\xa9\x7f\x40\x62\x42\xf3\x25\x92\xf5\xb3\xf3\x59\x9f\x6b\x5a\x62\x81\x77\x4f\xc7\x2a\x12\xc7\x46\x21\x8b\xb3\xce\x68\x41\xb0\x4c\x0d\x3c\x9d\x2a\x55\x2e\x97\xab\xb7\xf5\x3a\x49\x12\x61\x1d\x3a\x6d\xc4\x51\x48\x8d\x8f\x9d\x20\x77\x73\xd8\x6c\xd6\xc2\x2e\xec\xb7\xdb\x0c\x7e\x12\x00\x80\xa2\x80\x0f\x32\xda\xc3\x97\x66\xa7\x6b\x8f\x60\x89\x41\x03\xa3\x45\xc6\x60\x10\x84\x40\x0e\x08\x95\x82\x72\xd7\xb8\x00\x54\x7f\xa2\x91\x61\xd8\xa3\x80\xee\x9b\x2b\xb4\x73\x78\xbc\x0b\x97\x0f\x53\xc9\x90\x6f\x19\x5b\xcd\x98\x6a\x63\x64\x0e\x65\x94\x43\x69\x0c\xc5\x20\x3d\xcd\x90\x98\x90\x6a\x62\xa6\xe3\x3d\x0c\xfd\x97\xa1\xaf\x0e\xbd\xcd\x2f\x20\xf0\x32\x86\xa6\xd5\xf9\x1e\x45\xe9\x56\xd7\xce\x3b\xf9\x7e\xfe\x0f\xf2\x35\x2d\xda\x58\x7b\x67\x0a\xdb\x87\xd4\xd0\xcc\x1e\xf2\x91\x26\xcd\xae\xff\xf5\xb5\x58\x40\xab\x83\x33\xe9\x4c\x51\xf4\x3b\x08\x24\x17\xec\x1b\xe8\x4a\x8d\x38\xb3\x6c\xbc\xf0\x3c\x3e\x78\x42\x13\x05\x27\x0b\xb7\x47\xec\x57\x68\xf3\x0e\x45\x91\xf7\x68\x84\x58\x4d\x02\xd3\x80\x47\x75\x95\x79\xd1\x9a\x4d\x7b\xcf\xbf\x01\x00\x00\xff\xff\xbf\x07\xf3\x98\x24\x02\x00\x00"

func TransactionsQcSet_collector_clustersCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsQcSet_collector_clustersCdc,
		"../../../transactions/qc/set_collector_clusters.cdc",
	)
}

func TransactionsQcSet_collector_clustersCdc() (*asset, error) {
	bytes, err := TransactionsQcSet_collector_clustersCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/qc/set_collector_clusters.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0x48, 0xe0, 0x5b, 0x3a, 0x12, 0x20, 0x14, 0x4c, 0xb8, 0x5e, 0xc, 0x99, 0xae, 0x2a, 0x6e, 0xa0, 0x8c, 0xc, 0xe, 0xd5, 0xeb, 0x4c, 0xab, 0x8e, 0xe8, 0xe5, 0x27, 0x21, 0x4, 0xb0, 0x44}}
	return a, nil
}

var _TransactionsQcSubmit_qc_voteCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x4f\x6b\xe3\x30\x10\xc5\xef\xfe\x14\x8f\x1c\x16\x07\x16\x7b\xcf\x61\x77\x43\x50\xda\x53\x29\x38\x81\xde\x65\x79\x9c\xa8\xd8\x1a\x33\x1e\x35\x81\x92\xef\x5e\xe4\xfc\x81\x94\x50\x9d\xc4\xf0\xde\x9b\x9f\xf4\x7c\x3f\xb0\x28\x9e\x3b\x3e\x54\x91\x25\xf6\x86\x44\x7d\xeb\x9d\x55\x42\x2b\xdc\xe3\xcf\xb1\x32\xab\xf5\x7a\xf3\xb4\xdd\x66\x59\xa6\x62\xc3\x68\x9d\x7a\x0e\xb9\x6f\x16\xd8\xaa\xf8\xb0\xfb\x8d\xd1\xef\x82\xd5\x28\x74\x1d\xcd\xf1\x99\x01\x40\x59\xe2\x85\x9d\xed\xf0\x61\xc5\xdb\xba\x23\xb4\x2c\xb0\x10\x6a\x49\x28\x38\x82\x32\x74\x4f\xa8\x0c\x5e\xb9\xa1\xc9\xd4\x91\x22\x70\x43\x1b\x6a\x17\xf8\xf5\x10\xae\x48\xe2\xca\x64\x93\x7e\x10\x1a\xac\x50\x6e\x9d\xd3\x05\x56\x51\xf7\x2b\xe7\x38\x06\x4d\x14\x93\xe2\x82\x52\xb3\x08\x1f\x1e\xad\x4f\xeb\xc0\xf5\x3b\x39\xbd\x19\x46\xea\xda\xe2\xc2\x81\x7f\x48\xe9\xc5\x39\xe1\xef\x8f\x50\xff\xf3\x72\x54\x16\xbb\xa3\xb2\x4d\x32\x93\xc6\xf3\x5b\x6c\x3a\xcb\x25\x06\x1b\xbc\xcb\x67\x86\x63\xd7\x20\xb0\x5e\xe1\xee\xd0\x2a\x33\x91\xcd\xce\xee\xd3\xf9\x31\x74\x24\x17\x95\x2e\x3f\xfc\x9d\xb4\x18\x63\xdd\x7b\xad\xcc\x1b\x2b\x4d\x25\xf9\xe6\xae\xa0\xdb\xf5\x1a\x7a\xfa\x0a\x00\x00\xff\xff\x36\xb8\xb9\xcf\x06\x02\x00\x00"

func TransactionsQcSubmit_qc_voteCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsQcSubmit_qc_voteCdc,
		"../../../transactions/qc/submit_qc_vote.cdc",
	)
}

func TransactionsQcSubmit_qc_voteCdc() (*asset, error) {
	bytes, err := TransactionsQcSubmit_qc_voteCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/qc/submit_qc_vote.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x6e, 0xec, 0xd0, 0xb0, 0xb9, 0x89, 0x4, 0xd1, 0x6d, 0x64, 0x5a, 0x96, 0xe4, 0xb1, 0x1, 0x5f, 0x6c, 0xb6, 0xc2, 0xb8, 0xc1, 0xd4, 0xa3, 0xa1, 0x59, 0x3a, 0xdd, 0xa9, 0x9f, 0x2c, 0x86}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../transactions/idTableStaking/create_node.cdc":              TransactionsIdtablestakingCreate_nodeCdc,
	"../../../transactions/idTableStaking/create_stake.cdc":             TransactionsIdtablestakingCreate_stakeCdc,
	"../../../transactions/idTableStaking/get_current_table.cdc":        TransactionsIdtablestakingGet_current_tableCdc,
	"../../../transactions/idTableStaking/get_node_committedTokens.cdc": TransactionsIdtablestakingGet_node_committedtokensCdc,
	"../../../transactions/idTableStaking/get_node_initial_weight.cdc":  TransactionsIdtablestakingGet_node_initial_weightCdc,
	"../../../transactions/idTableStaking/get_node_networking_addr.cdc": TransactionsIdtablestakingGet_node_networking_addrCdc,
	"../../../transactions/idTableStaking/get_node_networking_key.cdc":  TransactionsIdtablestakingGet_node_networking_keyCdc,
	"../../../transactions/idTableStaking/get_node_role.cdc":            TransactionsIdtablestakingGet_node_roleCdc,
	"../../../transactions/idTableStaking/get_node_stakedTokens.cdc":    TransactionsIdtablestakingGet_node_stakedtokensCdc,
	"../../../transactions/idTableStaking/get_node_staking_key.cdc":     TransactionsIdtablestakingGet_node_staking_keyCdc,
	"../../../transactions/idTableStaking/get_node_unlockedTokens.cdc":  TransactionsIdtablestakingGet_node_unlockedtokensCdc,
	"../../../transactions/idTableStaking/get_node_unstakedTokens.cdc":  TransactionsIdtablestakingGet_node_unstakedtokensCdc,
	"../../../transactions/idTableStaking/remove_node.cdc":              TransactionsIdtablestakingRemove_nodeCdc,
	"../../../transactions/idTableStaking/stake_new_tokens.cdc":         TransactionsIdtablestakingStake_new_tokensCdc,
	"../../../transactions/idTableStaking/stake_unlocked_tokens.cdc":    TransactionsIdtablestakingStake_unlocked_tokensCdc,
	"../../../transactions/idTableStaking/transfer_minter_deploy.cdc":   TransactionsIdtablestakingTransfer_minter_deployCdc,
	"../../../transactions/idTableStaking/unstake_tokens.cdc":           TransactionsIdtablestakingUnstake_tokensCdc,
	"../../../transactions/idTableStaking/withdraw_tokens.cdc":          TransactionsIdtablestakingWithdraw_tokensCdc,
	"../../../transactions/inspect_field.cdc":                           TransactionsInspect_fieldCdc,
	"../../../transactions/qc/create_qc_object.cdc":                     TransactionsQcCreate_qc_objectCdc,
	"../../../transactions/qc/get_all_votes.cdc":                        TransactionsQcGet_all_votesCdc,
	"../../../transactions/qc/get_clusters.cdc":                         TransactionsQcGet_clustersCdc,
	"../../../transactions/qc/get_votes_in_cluster.cdc":                 TransactionsQcGet_votes_in_clusterCdc,
	"../../../transactions/qc/reset_qc_voting.cdc":                      TransactionsQcReset_qc_votingCdc,
	"../../../transactions/qc/set_collector_clusters.cdc":               TransactionsQcSet_collector_clustersCdc,
	"../../../transactions/qc/submit_qc_vote.cdc":                       TransactionsQcSubmit_qc_voteCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"..": &bintree{nil, map[string]*bintree{
				"transactions": &bintree{nil, map[string]*bintree{
					"idTableStaking": &bintree{nil, map[string]*bintree{
						"create_node.cdc":              &bintree{TransactionsIdtablestakingCreate_nodeCdc, map[string]*bintree{}},
						"create_stake.cdc":             &bintree{TransactionsIdtablestakingCreate_stakeCdc, map[string]*bintree{}},
						"get_current_table.cdc":        &bintree{TransactionsIdtablestakingGet_current_tableCdc, map[string]*bintree{}},
						"get_node_committedTokens.cdc": &bintree{TransactionsIdtablestakingGet_node_committedtokensCdc, map[string]*bintree{}},
						"get_node_initial_weight.cdc":  &bintree{TransactionsIdtablestakingGet_node_initial_weightCdc, map[string]*bintree{}},
						"get_node_networking_addr.cdc": &bintree{TransactionsIdtablestakingGet_node_networking_addrCdc, map[string]*bintree{}},
						"get_node_networking_key.cdc":  &bintree{TransactionsIdtablestakingGet_node_networking_keyCdc, map[string]*bintree{}},
						"get_node_role.cdc":            &bintree{TransactionsIdtablestakingGet_node_roleCdc, map[string]*bintree{}},
						"get_node_stakedTokens.cdc":    &bintree{TransactionsIdtablestakingGet_node_stakedtokensCdc, map[string]*bintree{}},
						"get_node_staking_key.cdc":     &bintree{TransactionsIdtablestakingGet_node_staking_keyCdc, map[string]*bintree{}},
						"get_node_unlockedTokens.cdc":  &bintree{TransactionsIdtablestakingGet_node_unlockedtokensCdc, map[string]*bintree{}},
						"get_node_unstakedTokens.cdc":  &bintree{TransactionsIdtablestakingGet_node_unstakedtokensCdc, map[string]*bintree{}},
						"remove_node.cdc":              &bintree{TransactionsIdtablestakingRemove_nodeCdc, map[string]*bintree{}},
						"stake_new_tokens.cdc":         &bintree{TransactionsIdtablestakingStake_new_tokensCdc, map[string]*bintree{}},
						"stake_unlocked_tokens.cdc":    &bintree{TransactionsIdtablestakingStake_unlocked_tokensCdc, map[string]*bintree{}},
						"transfer_minter_deploy.cdc":   &bintree{TransactionsIdtablestakingTransfer_minter_deployCdc, map[string]*bintree{}},
						"unstake_tokens.cdc":           &bintree{TransactionsIdtablestakingUnstake_tokensCdc, map[string]*bintree{}},
						"withdraw_tokens.cdc":          &bintree{TransactionsIdtablestakingWithdraw_tokensCdc, map[string]*bintree{}},
					}},
					"inspect_field.cdc": &bintree{TransactionsInspect_fieldCdc, map[string]*bintree{}},
					"qc": &bintree{nil, map[string]*bintree{
						"create_qc_object.cdc":       &bintree{TransactionsQcCreate_qc_objectCdc, map[string]*bintree{}},
						"get_all_votes.cdc":          &bintree{TransactionsQcGet_all_votesCdc, map[string]*bintree{}},
						"get_clusters.cdc":           &bintree{TransactionsQcGet_clustersCdc, map[string]*bintree{}},
						"get_votes_in_cluster.cdc":   &bintree{TransactionsQcGet_votes_in_clusterCdc, map[string]*bintree{}},
						"reset_qc_voting.cdc":        &bintree{TransactionsQcReset_qc_votingCdc, map[string]*bintree{}},
						"set_collector_clusters.cdc": &bintree{TransactionsQcSet_collector_clustersCdc, map[string]*bintree{}},
						"submit_qc_vote.cdc":         &bintree{TransactionsQcSubmit_qc_voteCdc, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
